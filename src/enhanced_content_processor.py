"""
Procesador de contenido mejorado para el bot ZTech
Incluye t√≠tulos pol√©micos, im√°genes autom√°ticas y contenido m√°s largo
"""
import re
import random
from typing import List, Dict, Optional
from datetime import datetime
from loguru import logger
from config import Config

class EnhancedContentProcessor:
    """Procesador de contenido mejorado con engagement optimizado"""
    
    def __init__(self, language: str = 'es'):
        self.language = language
        self.hashtags = Config.HASHTAGS
        self.max_length = Config.MAX_TWEET_LENGTH
        self.use_controversial = Config.USE_CONTROVERSIAL_TITLES
        self.use_images = Config.USE_IMAGES
        self.min_content_length = Config.MIN_CONTENT_LENGTH
        
        # Configurar hashtags por idioma
        if language == 'en':
            self.hashtags = [
                '#technology', '#innovation', '#AI', '#programming', '#tech',
                '#startup', '#cybersecurity', '#blockchain', '#hardware', '#mobile'
            ]
        else:
            self.hashtags = [
                '#tecnologia', '#innovacion', '#IA', '#programacion', '#tech',
                '#startup', '#ciberseguridad', '#blockchain', '#hardware', '#mobile'
            ]
    
    def process_article_to_tweet(self, article: Dict) -> Optional[str]:
        """
        Convierte un art√≠culo en un tweet optimizado con m√°s contenido
        
        Args:
            article: Diccionario con informaci√≥n del art√≠culo
            
        Returns:
            Texto del tweet o None si no se puede procesar
        """
        try:
            title = article.get('title', '').strip()
            summary = article.get('summary', '').strip()
            link = article.get('link', '').strip()
            source = article.get('source', '')
            
            if not title or not link:
                logger.warning("‚ö†Ô∏è Art√≠culo sin t√≠tulo o enlace, saltando...")
                return None
            
            # Generar t√≠tulo pol√©mico si est√° habilitado
            if self.use_controversial:
                title = self._make_controversial_title(title)
            
            # Crear tweet con m√°s contenido
            tweet = self._create_enhanced_tweet(title, summary, link, source)
            
            if tweet and len(tweet) <= self.max_length:
                return tweet
            else:
                # Si es muy largo, usar versi√≥n optimizada
                return self._create_optimized_tweet(title, summary, link, source)
                
        except Exception as e:
            logger.error(f"‚ùå Error procesando art√≠culo: {e}")
            return None
    
    def _make_controversial_title(self, title: str) -> str:
        """
        Hace el t√≠tulo m√°s pol√©mico para generar engagement
        
        Args:
            title: T√≠tulo original
            
        Returns:
            T√≠tulo pol√©mico
        """
        if not self.use_controversial:
            return title
        
        # Obtener palabras clave pol√©micas seg√∫n el idioma
        controversial_words = Config.CONTROVERSIAL_KEYWORDS.get(self.language, [])
        
        if not controversial_words:
            return title
        
        # Seleccionar palabra pol√©mica aleatoria
        controversial_word = random.choice(controversial_words)
        
        # Patrones para insertar la palabra pol√©mica
        patterns = [
            f"{controversial_word.upper()}: {title}",
            f"{title} - {controversial_word.upper()}",
            f"üö® {controversial_word.upper()}: {title}",
            f"‚ö° {controversial_word.upper()}: {title}",
            f"üî• {controversial_word.upper()}: {title}",
            f"üí• {controversial_word.upper()}: {title}"
        ]
        
        return random.choice(patterns)
    
    def _create_enhanced_tweet(self, title: str, summary: str, link: str, source: str) -> str:
        """
        Crea un tweet con m√°s contenido y engagement para generar m√°s clicks
        
        Args:
            title: T√≠tulo del art√≠culo
            summary: Resumen del art√≠culo
            link: Enlace del art√≠culo
            source: Fuente del art√≠culo
            
        Returns:
            Tweet mejorado con m√°s contenido
        """
        # Emojis seg√∫n el tipo de contenido
        emoji = self._get_content_emoji(title, summary)
        
        # Crear tweet base con t√≠tulo pol√©mico
        tweet = f"{emoji} {title}\n\n"
        
        # Agregar resumen expandido con m√°s detalles
        if summary:
            expanded_summary = self._expand_summary(summary)
            tweet += f"{expanded_summary}\n\n"
        
        # Agregar informaci√≥n adicional para generar inter√©s
        additional_info = self._get_additional_info(title, summary)
        if additional_info and len(tweet) + len(additional_info) + 100 < self.max_length:
            tweet += f"{additional_info}\n\n"
        
        # Agregar call-to-action m√°s atractivo
        cta = self._get_enhanced_call_to_action()
        if len(tweet) + len(cta) + 50 < self.max_length:
            tweet += f"{cta}\n\n"
        
        # Agregar enlace con descripci√≥n
        link_description = self._get_link_description()
        tweet += f"üîó {link_description}\n{link}\n\n"
        
        # Agregar hashtags optimizados
        hashtags = self._get_optimized_hashtags(title, summary)
        tweet += hashtags
        
        return tweet
    
    def _create_optimized_tweet(self, title: str, summary: str, link: str, source: str) -> str:
        """
        Crea un tweet optimizado cuando el contenido es muy largo
        
        Args:
            title: T√≠tulo del art√≠culo
            summary: Resumen del art√≠culo
            link: Enlace del art√≠culo
            source: Fuente del art√≠culo
            
        Returns:
            Tweet optimizado
        """
        emoji = self._get_content_emoji(title, summary)
        
        # Calcular espacio disponible
        base_length = len(link) + len(self._get_optimized_hashtags(title, summary)) + 50
        available_length = self.max_length - base_length
        
        # Truncar t√≠tulo si es necesario
        if len(title) > available_length:
            title = title[:available_length-3] + "..."
        
        tweet = f"{emoji} {title}\n\n"
        tweet += f"üîó {link}\n\n"
        tweet += self._get_optimized_hashtags(title, summary)
        
        return tweet
    
    def _get_content_emoji(self, title: str, summary: str) -> str:
        """
        Obtiene emoji seg√∫n el tipo de contenido
        
        Args:
            title: T√≠tulo del art√≠culo
            summary: Resumen del art√≠culo
            
        Returns:
            Emoji apropiado
        """
        content = f"{title} {summary}".lower()
        
        if any(word in content for word in ['ai', 'artificial intelligence', 'machine learning', 'ia', 'inteligencia artificial']):
            return "ü§ñ"
        elif any(word in content for word in ['programming', 'code', 'developer', 'programaci√≥n', 'c√≥digo', 'desarrollador']):
            return "üíª"
        elif any(word in content for word in ['startup', 'entrepreneur', 'business', 'emprendimiento', 'negocio']):
            return "üöÄ"
        elif any(word in content for word in ['security', 'hack', 'cyber', 'seguridad', 'hackeo', 'ciber']):
            return "üîí"
        elif any(word in content for word in ['blockchain', 'crypto', 'bitcoin', 'ethereum']):
            return "‚õìÔ∏è"
        elif any(word in content for word in ['hardware', 'cpu', 'gpu', 'hardware', 'procesador']):
            return "üîß"
        elif any(word in content for word in ['mobile', 'smartphone', 'android', 'ios', 'm√≥vil', 'celular']):
            return "üì±"
        else:
            return "üì∞"
    
    def _expand_summary(self, summary: str) -> str:
        """
        Expande el resumen para hacerlo m√°s atractivo y generar m√°s clicks
        
        Args:
            summary: Resumen original
            
        Returns:
            Resumen expandido con m√°s detalles
        """
        if not summary:
            return ""
        
        # Limpiar y expandir el resumen
        expanded = summary.strip()
        
        # Agregar conectores y detalles adicionales
        connectors = {
            'en': [
                'This revolutionary technology', 'The groundbreaking innovation', 
                'This game-changing breakthrough', 'The unprecedented development',
                'This cutting-edge advancement', 'The industry-disrupting technology'
            ],
            'es': [
                'Esta tecnolog√≠a revolucionaria', 'La innovaci√≥n revolucionaria', 
                'Este avance que cambia el juego', 'El desarrollo sin precedentes',
                'Esta tecnolog√≠a de vanguardia', 'La tecnolog√≠a que est√° revolucionando'
            ]
        }
        
        # Agregar detalles adicionales para generar m√°s inter√©s
        additional_details = {
            'en': [
                'Experts predict this will transform the industry completely.',
                'This could be the biggest breakthrough of the year.',
                'Industry leaders are calling this a game-changer.',
                'This technology is already being adopted by major companies.',
                'The implications of this development are enormous.',
                'This could revolutionize how we work and live.'
            ],
            'es': [
                'Los expertos predicen que esto transformar√° la industria completamente.',
                'Este podr√≠a ser el avance m√°s grande del a√±o.',
                'Los l√≠deres de la industria lo llaman un cambio de juego.',
                'Esta tecnolog√≠a ya est√° siendo adoptada por grandes empresas.',
                'Las implicaciones de este desarrollo son enormes.',
                'Esto podr√≠a revolucionar c√≥mo trabajamos y vivimos.'
            ]
        }
        
        # Construir resumen expandido
        if len(expanded) < self.min_content_length:
            connector = random.choice(connectors.get(self.language, connectors['es']))
            expanded = f"{connector} {expanded.lower()}"
        
        # Agregar detalles adicionales si hay espacio
        if len(expanded) < 200:
            detail = random.choice(additional_details.get(self.language, additional_details['es']))
            expanded += f" {detail}"
        
        return expanded
    
    def _get_call_to_action(self) -> str:
        """
        Obtiene un call-to-action seg√∫n el idioma
        
        Returns:
            Call-to-action
        """
        ctas = {
            'en': [
                "What do you think about this?",
                "How will this impact the industry?",
                "Share your thoughts below!",
                "This is game-changing!",
                "Your opinion matters!"
            ],
            'es': [
                "¬øQu√© opinas sobre esto?",
                "¬øC√≥mo impactar√° esto a la industria?",
                "¬°Comparte tu opini√≥n!",
                "¬°Esto cambia todo!",
                "Tu opini√≥n importa!"
            ]
        }
        
        return random.choice(ctas.get(self.language, ctas['es']))
    
    def _get_enhanced_call_to_action(self) -> str:
        """
        Obtiene un call-to-action m√°s atractivo para generar clicks
        
        Returns:
            Call-to-action mejorado
        """
        ctas = {
            'en': [
                "üöÄ This is HUGE! What's your take?",
                "üí° Game-changer alert! Thoughts?",
                "üî• This will blow your mind! Agree?",
                "‚ö° Revolutionary stuff! Your opinion?",
                "üéØ This changes everything! What do you think?",
                "üí• Mind-blowing! Share your thoughts!",
                "üåü Incredible breakthrough! Your take?",
                "üö® This is massive! What's your view?"
            ],
            'es': [
                "üöÄ ¬°Esto es ENORME! ¬øQu√© opinas?",
                "üí° ¬°Alerta de cambio de juego! ¬øPensamientos?",
                "üî• ¬°Esto te va a volar la mente! ¬øEst√°s de acuerdo?",
                "‚ö° ¬°Cosas revolucionarias! ¬øTu opini√≥n?",
                "üéØ ¬°Esto cambia todo! ¬øQu√© piensas?",
                "üí• ¬°Alucinante! ¬°Comparte tus pensamientos!",
                "üåü ¬°Avance incre√≠ble! ¬øTu punto de vista?",
                "üö® ¬°Esto es masivo! ¬øCu√°l es tu visi√≥n?"
            ]
        }
        
        return random.choice(ctas.get(self.language, ctas['es']))
    
    def _get_additional_info(self, title: str, summary: str) -> str:
        """
        Obtiene informaci√≥n adicional para hacer el tweet m√°s atractivo
        
        Args:
            title: T√≠tulo del art√≠culo
            summary: Resumen del art√≠culo
            
        Returns:
            Informaci√≥n adicional
        """
        content = f"{title} {summary}".lower()
        
        additional_info = {
            'en': [
                "The implications are enormous and could reshape entire industries.",
                "This breakthrough has been years in the making and is finally here.",
                "Industry experts are calling this the most significant development yet.",
                "The technology behind this is truly revolutionary and game-changing.",
                "This could be the breakthrough we've all been waiting for.",
                "The potential applications are endless and incredibly exciting.",
                "This development marks a new era in technology and innovation."
            ],
            'es': [
                "Las implicaciones son enormes y podr√≠an reestructurar industrias enteras.",
                "Este avance lleva a√±os en desarrollo y finalmente est√° aqu√≠.",
                "Los expertos de la industria lo llaman el desarrollo m√°s significativo hasta ahora.",
                "La tecnolog√≠a detr√°s de esto es verdaderamente revolucionaria y cambia el juego.",
                "Este podr√≠a ser el avance que todos hemos estado esperando.",
                "Las aplicaciones potenciales son infinitas e incre√≠blemente emocionantes.",
                "Este desarrollo marca una nueva era en tecnolog√≠a e innovaci√≥n."
            ]
        }
        
        return random.choice(additional_info.get(self.language, additional_info['es']))
    
    def _get_link_description(self) -> str:
        """
        Obtiene una descripci√≥n atractiva para el enlace
        
        Returns:
            Descripci√≥n del enlace
        """
        descriptions = {
            'en': [
                "Read the full story here:",
                "Get all the details:",
                "Full article here:",
                "Complete coverage:",
                "Deep dive into this:",
                "Full report:",
                "Complete analysis:"
            ],
            'es': [
                "Lee la historia completa aqu√≠:",
                "Obt√©n todos los detalles:",
                "Art√≠culo completo aqu√≠:",
                "Cobertura completa:",
                "An√°lisis profundo aqu√≠:",
                "Reporte completo:",
                "An√°lisis completo:"
            ]
        }
        
        return random.choice(descriptions.get(self.language, descriptions['es']))
    
    def _get_optimized_hashtags(self, title: str, summary: str) -> str:
        """
        Obtiene hashtags optimizados seg√∫n el contenido
        
        Args:
            title: T√≠tulo del art√≠culo
            summary: Resumen del art√≠culo
            
        Returns:
            String con hashtags optimizados
        """
        content = f"{title} {summary}".lower()
        
        # Hashtags base
        base_hashtags = self.hashtags[:3]  # Tomar los primeros 3
        
        # Hashtags espec√≠ficos seg√∫n contenido
        specific_hashtags = []
        
        if any(word in content for word in ['ai', 'artificial intelligence', 'ia', 'inteligencia artificial']):
            specific_hashtags.extend(['#AI', '#MachineLearning'] if self.language == 'en' else ['#IA', '#MachineLearning'])
        
        if any(word in content for word in ['programming', 'code', 'programaci√≥n', 'c√≥digo']):
            specific_hashtags.extend(['#Programming', '#Code'] if self.language == 'en' else ['#Programacion', '#Codigo'])
        
        if any(word in content for word in ['startup', 'emprendimiento']):
            specific_hashtags.extend(['#Startup', '#Entrepreneur'] if self.language == 'en' else ['#Startup', '#Emprendimiento'])
        
        # Combinar hashtags
        all_hashtags = base_hashtags + specific_hashtags[:2]  # M√°ximo 5 hashtags
        
        return ' '.join(all_hashtags)
    
    def get_image_url(self, title: str, summary: str) -> Optional[str]:
        """
        Obtiene URL de imagen seg√∫n el tipo de contenido
        
        Args:
            title: T√≠tulo del art√≠culo
            summary: Resumen del art√≠culo
            
        Returns:
            URL de imagen o None
        """
        if not self.use_images:
            return None
        
        content = f"{title} {summary}".lower()
        
        # Determinar categor√≠a del contenido
        if any(word in content for word in ['ai', 'artificial intelligence', 'ia', 'inteligencia artificial']):
            return Config.IMAGE_URLS.get('ai')
        elif any(word in content for word in ['programming', 'code', 'programaci√≥n', 'c√≥digo']):
            return Config.IMAGE_URLS.get('programming')
        elif any(word in content for word in ['startup', 'emprendimiento']):
            return Config.IMAGE_URLS.get('startup')
        elif any(word in content for word in ['security', 'hack', 'cyber', 'seguridad', 'hackeo']):
            return Config.IMAGE_URLS.get('cybersecurity')
        elif any(word in content for word in ['blockchain', 'crypto', 'bitcoin']):
            return Config.IMAGE_URLS.get('blockchain')
        elif any(word in content for word in ['hardware', 'cpu', 'gpu', 'hardware']):
            return Config.IMAGE_URLS.get('hardware')
        elif any(word in content for word in ['mobile', 'smartphone', 'android', 'ios', 'm√≥vil']):
            return Config.IMAGE_URLS.get('mobile')
        else:
            return Config.IMAGE_URLS.get('default')
    
    def validate_tweet(self, tweet: str) -> bool:
        """
        Valida que un tweet cumpla con los requisitos
        
        Args:
            tweet: Texto del tweet
            
        Returns:
            True si es v√°lido, False en caso contrario
        """
        if not tweet or not tweet.strip():
            return False
        
        if len(tweet) > self.max_length:
            logger.warning(f"‚ö†Ô∏è Tweet muy largo: {len(tweet)} caracteres")
            return False
        
        # Verificar que tenga contenido m√≠nimo
        if len(tweet.strip()) < 100:
            logger.warning("‚ö†Ô∏è Tweet muy corto")
            return False
        
        return True
